From: Sam Macbeth <sam@cliqz.com>
Date: Wed, 4 Nov 2020 10:35:34 +0100
Subject: Fix compiler error on optimised windows builds

From https://bugzilla.mozilla.org/show_bug.cgi?id=1654490
---
 .../translator/tree_util/IntermTraverse.cpp   | 37 -------------------
 .../translator/tree_util/IntermTraverse.h     | 32 +++++++++++++++-
 2 files changed, 31 insertions(+), 38 deletions(-)

diff --git a/gfx/angle/checkout/src/compiler/translator/tree_util/IntermTraverse.cpp b/gfx/angle/checkout/src/compiler/translator/tree_util/IntermTraverse.cpp
index c38baa12bf..0a4cfae837 100644
--- a/gfx/angle/checkout/src/compiler/translator/tree_util/IntermTraverse.cpp
+++ b/gfx/angle/checkout/src/compiler/translator/tree_util/IntermTraverse.cpp
@@ -13,43 +13,6 @@
 namespace sh
 {
 
-// Traverse the intermediate representation tree, and call a node type specific visit function for
-// each node. Traversal is done recursively through the node member function traverse(). Nodes with
-// children can have their whole subtree skipped if preVisit is turned on and the type specific
-// function returns false.
-template <typename T>
-void TIntermTraverser::traverse(T *node)
-{
-    ScopedNodeInTraversalPath addToPath(this, node);
-    if (!addToPath.isWithinDepthLimit())
-        return;
-
-    bool visit = true;
-
-    // Visit the node before children if pre-visiting.
-    if (preVisit)
-        visit = node->visit(PreVisit, this);
-
-    if (visit)
-    {
-        size_t childIndex = 0;
-        size_t childCount = node->getChildCount();
-
-        while (childIndex < childCount && visit)
-        {
-            node->getChildNode(childIndex)->traverse(this);
-            if (inVisit && childIndex != childCount - 1)
-            {
-                visit = node->visit(InVisit, this);
-            }
-            ++childIndex;
-        }
-
-        if (visit && postVisit)
-            node->visit(PostVisit, this);
-    }
-}
-
 void TIntermNode::traverse(TIntermTraverser *it)
 {
     it->traverse(this);
diff --git a/gfx/angle/checkout/src/compiler/translator/tree_util/IntermTraverse.h b/gfx/angle/checkout/src/compiler/translator/tree_util/IntermTraverse.h
index 30687a4869..d6800208a0 100644
--- a/gfx/angle/checkout/src/compiler/translator/tree_util/IntermTraverse.h
+++ b/gfx/angle/checkout/src/compiler/translator/tree_util/IntermTraverse.h
@@ -73,7 +73,37 @@ class TIntermTraverser : angle::NonCopyable
     // It's templated in order to avoid virtual function calls, this gains around 2% compiler
     // performance.
     template <typename T>
-    void traverse(T *node);
+    void traverse(T *node)
+    {
+        ScopedNodeInTraversalPath addToPath(this, node);
+        if (!addToPath.isWithinDepthLimit())
+            return;
+
+        bool visit = true;
+
+        // Visit the node before children if pre-visiting.
+        if (preVisit)
+            visit = node->visit(PreVisit, this);
+
+        if (visit)
+        {
+            size_t childIndex = 0;
+            size_t childCount = node->getChildCount();
+
+            while (childIndex < childCount && visit)
+            {
+                node->getChildNode(childIndex)->traverse(this);
+                if (inVisit && childIndex != childCount - 1)
+                {
+                    visit = node->visit(InVisit, this);
+                }
+                ++childIndex;
+            }
+
+            if (visit && postVisit)
+                node->visit(PostVisit, this);
+        }
+    }
 
     // Specialized traverse functions are implemented for node types where traversal logic may need
     // to be overridden or where some special bookkeeping needs to be done.
-- 
2.29.2

