/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* vim: set ts=8 sts=2 et sw=2 tw=80: */
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "mozilla-config.h"
#include "AccessibleHandler.h"

import "ocidl.idl";
import "servprov.idl";

import "Accessible2_3.idl";
import "AccessibleHypertext2.idl";
import "AccessibleHyperlink.idl";
import "AccessibleTable.idl";
import "AccessibleTable2.idl";
import "AccessibleTableCell.idl";

typedef struct _StaticIA2Data
{
  NEWEST_IA2_INTERFACE* mIA2;
  IAccessibleHypertext2* mIAHypertext;
  IAccessibleHyperlink* mIAHyperlink;
  IAccessibleTable* mIATable;
  IAccessibleTable2* mIATable2;
  IAccessibleTableCell* mIATableCell;
} StaticIA2Data;

typedef struct _DynamicIA2Data
{
  // From IAccessible/IAccessible2
  VARIANT           mRole;
  long              mState;
  long              mChildCount;
  long              mIA2Role;
  AccessibleStates  mIA2States;
  long              mLeft;
  long              mTop;
  long              mWidth;
  long              mHeight;
  long              mHwnd;
  BSTR              mKeyboardShortcut;
  BSTR              mName;
  BSTR              mDescription;
  BSTR              mDefaultAction;
  BSTR              mValue;
  BSTR              mAttributes;
  IA2Locale         mIA2Locale;
  // From IAccessibleAction
  long              mNActions;
  // From IAccessibleTableCell
  long              mRowIndex;
  long              mColumnIndex;
  long              mRowExtent;
  long              mColumnExtent;
  boolean           mCellIsSelected;
  // From IAccessible2
  long              mUniqueId;
} DynamicIA2Data;

interface IGeckoBackChannel;

// We define different CLSIDs and IIDs depending on channel and officiality.
// This prevents handlers from installing overtop one another when multiple
// channels are present. Note that we do not do this for all UUIDs in this IDL,
// just the ones that are written to the registry (coclass and interfaces that
// have the [object] annotation)
// Cliqz. Replace all IIDs and CLSIDs with new one.

#if defined(USE_LOCAL_UUID)

# if defined(DEBUG)

// Local debug builds
#  define HANDLER_CLSID e052d988-37a6-4f28-85f4-8b6ed3a4333f
#  define IHANDLERCONTROL_IID cd8b48f4-1cbb-49e0-b8cc-6af7576e0093
#  define ASYNCIHANDLERCONTROL_IID 0dc778f8-0fce-49ad-a6e6-e46d39f7158e
#  define IGECKOBACKCHANNEL_IID 0e05453e-1380-4fc4-b1be-35cceff68c0b

# else

// Local non-debug builds
#  define HANDLER_CLSID 0e1b433b-a383-4513-9542-6dd082a09f48
#  define IHANDLERCONTROL_IID 627770c0-51d2-4017-bb19-d13deb18e3d6
#  define ASYNCIHANDLERCONTROL_IID e91fee74-dff6-4f22-ba26-e95f31ce3869
#  define IGECKOBACKCHANNEL_IID 04dcf3c8-6a35-4fa1-ae01-bcb3643fb10c

# endif

#elif defined(NIGHTLY_BUILD)

// Nightly Builds
# define IHANDLERCONTROL_IID f00b9065-a654-432f-9d08-e2a0216ad77f
# define ASYNCIHANDLERCONTROL_IID 5e0055e8-ac26-47eb-9d27-4bdc852876f6
# define HANDLER_CLSID 9e544f3d-d90a-45a0-a87b-40b5db30aa40
# define IGECKOBACKCHANNEL_IID 7a26e090-b401-4cf5-88fc-000b1c549c22

#elif defined(USE_BETA_UUID)

// Beta Builds
# define IHANDLERCONTROL_IID ef7acd32-cc55-4c47-913d-cba79af4a7f0
# define ASYNCIHANDLERCONTROL_IID 4ba5bca1-84d3-4c4e-ba37-41276af9ff40
# define HANDLER_CLSID 8c493661-d0fe-4868-a728-944aea83134a
# define IGECKOBACKCHANNEL_IID f11c1159-f38d-4945-ba65-fac7433d44f7

#elif defined(RELEASE_OR_BETA)

// Release Builds
# define IHANDLERCONTROL_IID e6c4e2ad-b2da-42a0-bc88-e882814522d6
# define ASYNCIHANDLERCONTROL_IID 4935884e-5190-499f-a24e-cf468fe66be7
# define HANDLER_CLSID f40a82cd-24d7-413d-aadc-843816fb4331
# define IGECKOBACKCHANNEL_IID 3205fda4-24de-4d7e-8dc6-89041664f451

#else

// Catch-all
# define IHANDLERCONTROL_IID d97eab6b-e1fc-479c-9d17-33c077b2b0e1
# define ASYNCIHANDLERCONTROL_IID 3c85a1c0-c9a0-4e98-9bb5-964ad02382aa
# define HANDLER_CLSID 1c579561-9a8d-4efb-9f18-4122cdcc7134
# define IGECKOBACKCHANNEL_IID 25ed5138-85bd-421f-b919-f0a79f543172

#endif

[uuid(0492045c-2a9b-4933-9b92-0bdaf939ac84)]
interface HandlerData
{
  typedef struct _IA2Payload
  {
    StaticIA2Data mStaticData;
    DynamicIA2Data mDynamicData;
    IGeckoBackChannel* mGeckoBackChannel;
  } IA2Payload;
}

[object,
 uuid(IHANDLERCONTROL_IID),
 async_uuid(ASYNCIHANDLERCONTROL_IID),
 pointer_default(unique)]
interface IHandlerControl : IUnknown
{
  HRESULT Invalidate();
  HRESULT OnTextChange([in] long aHwnd, [in] long aIA2UniqueId,
                       [in] VARIANT_BOOL aIsInsert,
                       [in] IA2TextSegment* aText);
}

typedef struct _IARelationData
{
  BSTR mType;
  long mNTargets;
} IARelationData;

typedef struct _AccChildData
{
  NEWEST_IA2_INTERFACE* mAccessible;
  BSTR mText;
  long mTextRole;
  long mTextId;
  long mTextState;
  long mTextLeft;
  long mTextTop;
  long mTextWidth;
  long mTextHeight;
} AccChildData;

[object,
 uuid(IGECKOBACKCHANNEL_IID),
 pointer_default(unique)]
interface IGeckoBackChannel : IUnknown
{
  [propput] HRESULT HandlerControl([in] long aPid, [in] IHandlerControl* aCtrl);
  HRESULT Refresh([out] DynamicIA2Data* aOutData);
  [propget] HRESULT AllTextInfo([out] BSTR* aText,
    [out, size_is(,*aNHyperlinks)] IAccessibleHyperlink*** aHyperlinks,
    [out] long* aNHyperlinks,
    [out, size_is(,*aNAttribRuns)] IA2TextSegment** aAttribRuns,
    [out] long* aNAttribRuns);
  [propget] HRESULT RelationsInfo(
    [out, size_is(,*aNRelations)] IARelationData** aRelations,
    [out] long* aNRelations);
  [propget] HRESULT AllChildren(
    [out, size_is(,*aNChildren)] AccChildData** aChildren,
    [out] ULONG* aNChildren);
}

[uuid(98c6b50d-7967-49c9-b76b-92aaf91e491b)]
library AccessibleHandlerTypeLib
{
  importlib("stdole2.tlb");

  /**
   * This definition is required in order for the handler implementation to
   * support IDispatch (aka Automation). This is used by interpreted language
   * FFIs to discover which interfaces may be controlled via IDispatch.
   * (In particular, the python FFI used by NVDA needs this).
   *
   * In reality, the only a11y interface that is Automation compliant is
   * IAccessible; our remaining interfaces are not.
   *
   * Once the FFI knows that IAccessible is supported, the FFI queries for
   * IAccessible and is then able to resolve non-automation interfaces from
   * there.
   */
  [uuid(HANDLER_CLSID)]
  coclass AccessibleHandler
  {
    [default] interface IAccessible;
  };
};
